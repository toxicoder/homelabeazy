name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        run: terraform fmt --check

      - name: TFLint
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: v0.50.3

      - name: TFLint recursive
        run: tflint --recursive

      - name: Lint YAML files
        uses: ibiqlik/action-yamllint@v3
        with:
          config_file: .yamllint.yml
          file_or_dir: ./apps

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.15.2

      - name: Lint Helm charts
        run: helm lint ./charts

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Prettier
        run: npm install -g prettier
      - name: Run Prettier
        run: prettier --check .

      - name: Install Biome
        run: |
          curl -fsSL https://biomejs.dev/install.sh | bash
          mv biome /usr/local/bin/
      - name: Run Biome
        run: biome check .

      - name: Install Unibeautify CLI
        run: npm install -g @unibeautify/cli
      - name: Run Unibeautify
        run: unibeautify --check

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Black
        run: pip install black
      - name: Run Black
        run: black --check .

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Run gofmt
        run: |
          go fmt $(go list ./... | grep -v /vendor/)
          git diff --exit-code

      - name: Install clang-format
        run: sudo apt-get install -y clang-format
      - name: Run clang-format
        run: |
          find . -name "*.h" -o -name "*.cpp" -print0 | xargs -0 clang-format -i
          git diff --exit-code

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Download google-java-format
        run: |
          wget https://github.com/google/google-java-format/releases/download/google-java-format-1.15.0/google-java-format-1.15.0-all-deps.jar -O /tmp/google-java-format.jar
      - name: Run google-java-format
        run: |
          find . -name "*.java" -print0 | xargs -0 java -jar /tmp/google-java-format.jar --replace
          git diff --exit-code

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run tests
        working-directory: ./infrastructure/proxmox
        run: go test -v ./test/...

  python-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          pip install -r tools/homelab-importer/requirements.txt
          pip install flake8 pytest coverage
      - name: Run flake8
        run: flake8 tools/homelab-importer/
      - name: Run tests with coverage
        run: |
          cd tools/homelab-importer
          coverage run -m unittest discover tests/
          coverage report

  test-synology:
    runs-on: ubuntu-latest
    services:
      mock-synology-api:
        image: python:3-slim
        volumes:
          - ${{ github.workspace }}:/github/workspace
        command: python /github/workspace/ansible/playbooks/mock_synology_api.py
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible requests

      - name: Run Synology playbook
        run: ansible-playbook ansible/playbooks/test_synology_mock.yml --extra-vars "mock_api_url=http://mock-synology-api:8000"

  ansible-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v4
      - name: Set up Python 3.
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install test dependencies.
        run: pip install ansible-lint
      - name: Run Ansible Lint.
        run: ansible-lint

  terraform-validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        run: terraform -chdir=infrastructure/proxmox init -backend=false
      - name: Terraform Validate
        run: terraform -chdir=infrastructure/proxmox validate

  tfsec:
    name: tfsec
    runs-on: ubuntu-latest

    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: infrastructure/proxmox

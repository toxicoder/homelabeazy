---
- name: Create Vault Namespace
  kubernetes.core.k8s:
    name: vault
    api_version: v1
    kind: Namespace
    state: present

- name: Add HashiCorp Helm repository
  kubernetes.core.helm_repository:
    name: hashicorp
    repo_url: "https://helm.releases.hashicorp.com"
    state: present

- name: Deploy Vault with Helm
  kubernetes.core.helm:
    name: vault
    chart_ref: hashicorp/vault
    release_namespace: vault
    values: "{{ lookup('template', 'vault-values.yml.j2') | from_yaml }}"

- name: Create Vault IngressRoute
  kubernetes.core.k8s:
    state: present
    template: 'vault-ingressroute.yml.j2'

- name: Wait for Vault pod to be ready
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: vault
    label_selectors:
      - app.kubernetes.io/name=vault
    wait: yes
    wait_condition:
      type: Ready
      status: "True"
  register: vault_pod

- name: Initialize Vault
  kubernetes.core.k8s_exec:
    namespace: vault
    pod: "{{ vault_pod.resources[0].metadata.name }}"
    command: "vault operator init -key-shares=1 -key-threshold=1 -format=json"
  register: vault_init_raw
  no_log: true

- name: Set vault credentials as fact
  ansible.builtin.set_fact:
    vault_credentials: "{{ vault_init_raw.stdout | from_json }}"
  no_log: true

- name: Create encrypted vault keys file content
  ansible.builtin.command:
    cmd: "ansible-vault encrypt_string"
    stdin: "{{ vault_credentials | to_nice_yaml }}"
  register: encrypted_content
  no_log: true
  delegate_to: localhost

- name: Store encrypted vault keys
  ansible.builtin.copy:
    content: "{{ encrypted_content.stdout }}"
    dest: "{{ playbook_dir }}/.vault_keys.yml"
  delegate_to: localhost
  no_log: true

- name: Unseal Vault
  kubernetes.core.k8s_exec:
    namespace: vault
    pod: "{{ vault_pod.resources[0].metadata.name }}"
    command: "vault operator unseal {{ item }}"
  loop: "{{ vault_credentials.unseal_keys_b64 }}"
  no_log: true

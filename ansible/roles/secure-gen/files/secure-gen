#!/usr/bin/env python3

import argparse
import os
import hvac
import yaml

def generate_secrets(config):
    """
    Generates secrets based on the provided configuration.
    """
    for secret_type, secrets in config.items():
        for secret in secrets:
            if secret_type == "ssh_keys":
                generate_ssh_key(secret["user_alias"])
            elif secret_type == "gpg_keys":
                generate_gpg_key(secret["user_alias"])
            elif secret_type == "private_keys":
                generate_private_key(secret["alias"])
            elif secret_type == "self_signed_certs":
                generate_self_signed_cert(secret["cn"])
            elif secret_type == "passwords":
                generate_password(secret["alias"])

def get_vault_client():
    vault_addr = os.environ.get("VAULT_ADDR", "http://127.0.0.1:8200")
    role_id = os.environ.get("VAULT_ROLE_ID")
    secret_id = os.environ.get("VAULT_SECRET_ID")

    if not role_id or not secret_id:
        raise ValueError("VAULT_ROLE_ID and VAULT_SECRET_ID environment variables must be set")

    client = hvac.Client(url=vault_addr)
    client.auth.approle.login(role_id=role_id, secret_id=secret_id)

    return client

from cryptography.hazmat.primitives import serialization as crypto_serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.backends import default_backend as crypto_default_backend

def generate_ssh_key(user_alias):
    """
    Generates a new SSH key pair and stores it in Vault.
    """
    print(f"Generating SSH key for {user_alias}...")

    # Generate the SSH key
    key = rsa.generate_private_key(
        backend=crypto_default_backend(),
        public_exponent=65537,
        key_size=4096
    )
    private_key = key.private_bytes(
        crypto_serialization.Encoding.PEM,
        crypto_serialization.PrivateFormat.OpenSSH,
        crypto_serialization.NoEncryption()
    )
    public_key = key.public_key().public_bytes(
        crypto_serialization.Encoding.OpenSSH,
        crypto_serialization.PublicFormat.OpenSSH
    )

    # Store the key in Vault
    client = get_vault_client()
    secret_path = f"secret/ssh/{user_alias}"
    client.secrets.kv.v2.create_or_update_secret(
        path=secret_path,
        secret=dict(private_key=private_key.decode('utf-8'), public_key=public_key.decode('utf-8')),
    )

    print(f"SSH key for {user_alias} stored in Vault at {secret_path}")

import gnupg

def generate_gpg_key(user_alias):
    """
    Generates a new GPG key and stores it in Vault.
    """
    print(f"Generating GPG key for {user_alias}...")

    gpg = gnupg.GPG()
    input_data = gpg.gen_key_input(
        key_type="RSA",
        key_length=4096,
        name_real=user_alias,
        name_email=f"{user_alias}@example.com",
        expire_date=0,
    )
    key = gpg.gen_key(input_data)
    private_key = gpg.export_keys(key.fingerprint, True)
    public_key = gpg.export_keys(key.fingerprint)

    # Store the key in Vault
    client = get_vault_client()
    secret_path = f"secret/gpg/{user_alias}"
    client.secrets.kv.v2.create_or_update_secret(
        path=secret_path,
        secret=dict(private_key=private_key, public_key=public_key),
    )

    print(f"GPG key for {user_alias} stored in Vault at {secret_path}")

def generate_private_key(alias):
    """
    Generates a new private key and stores it in Vault.
    """
    print(f"Generating private key with alias {alias}...")

    # Generate the private key
    key = rsa.generate_private_key(
        backend=crypto_default_backend(),
        public_exponent=65537,
        key_size=4096
    )
    private_key = key.private_bytes(
        crypto_serialization.Encoding.PEM,
        crypto_serialization.PrivateFormat.PKCS8,
        crypto_serialization.NoEncryption()
    )

    # Store the key in Vault
    client = get_vault_client()
    secret_path = f"secret/private_keys/{alias}"
    client.secrets.kv.v2.create_or_update_secret(
        path=secret_path,
        secret=dict(private_key=private_key.decode('utf-8')),
    )

    print(f"Private key with alias {alias} stored in Vault at {secret_path}")

from cryptography import x509
from cryptography.x509.oid import NameOID
import datetime

def generate_self_signed_cert(cn):
    """
    Generates a new self-signed X.509 certificate and stores it in Vault.
    """
    print(f"Generating self-signed certificate for {cn}...")

    # Generate a private key
    key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=crypto_default_backend()
    )

    # Generate a self-signed certificate
    subject = issuer = x509.Name([
        x509.NameAttribute(NameOID.COUNTRY_NAME, u"US"),
        x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, u"California"),
        x509.NameAttribute(NameOID.LOCALITY_NAME, u"San Francisco"),
        x509.NameAttribute(NameOID.ORGANIZATION_NAME, u"My Company"),
        x509.NameAttribute(NameOID.COMMON_NAME, cn),
    ])
    cert = x509.CertificateBuilder().subject_name(
        subject
    ).issuer_name(
        issuer
    ).public_key(
        key.public_key()
    ).serial_number(
        x509.random_serial_number()
    ).not_valid_before(
        datetime.datetime.utcnow()
    ).not_valid_after(
        datetime.datetime.utcnow() + datetime.timedelta(days=365)
    ).add_extension(
        x509.SubjectAlternativeName([x509.DNSName(cn)]),
        critical=False,
    ).sign(key, crypto_serialization.NoEncryption())

    private_key = key.private_bytes(
        crypto_serialization.Encoding.PEM,
        crypto_serialization.PrivateFormat.PKCS8,
        crypto_serialization.NoEncryption()
    )
    certificate = cert.public_bytes(crypto_serialization.Encoding.PEM)

    # Store the certificate and private key in Vault
    client = get_vault_client()
    secret_path = f"secret/certs/{cn}"
    client.secrets.kv.v2.create_or_update_secret(
        path=secret_path,
        secret=dict(private_key=private_key.decode('utf-8'), certificate=certificate.decode('utf-8')),
    )

    print(f"Self-signed certificate for {cn} stored in Vault at {secret_path}")

import secrets
import string

def generate_password(alias):
    """
    Generates a new password and stores it in Vault.
    """
    print(f"Generating password with alias {alias}...")

    # Generate a random password
    alphabet = string.ascii_letters + string.digits
    password = ''.join(secrets.choice(alphabet) for i in range(20))

    # Store the password in Vault
    client = get_vault_client()
    secret_path = f"secret/passwords/{alias}"
    client.secrets.kv.v2.create_or_update_secret(
        path=secret_path,
        secret=dict(password=password),
    )

    print(f"Password with alias {alias} stored in Vault at {secret_path}")

def main():
    parser = argparse.ArgumentParser(description="Generate secrets and store them in Vault.")
    parser.add_argument("--env", default="dev", help="The environment to generate secrets for.")
    args = parser.parse_args()

    with open("../../../../config/config.yml", "r") as f:
        config_data = yaml.safe_load(f)

    config = {**config_data.get("common", {}), **config_data.get(args.env, {})}

    if "secrets_to_generate" in config:
        generate_secrets(config["secrets_to_generate"])
    else:
        print("No secrets to generate.")

if __name__ == "__main__":
    main()
